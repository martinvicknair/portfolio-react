{"version":3,"sources":["components/Header/Header.js","components/SectionsWrapper/SectionsWrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Jumbotron","fluid","Row","Col","className","src","alt","width","href","SectionsWrapper","App","Container","components_Header_Header","components_SectionsWrapper_SectionsWrapper","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTA4CeA,SA3BA,WACX,OAGJC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAK,GACRJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAAA,UAAQK,UAAU,UAChBP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,sBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qCAAsCC,IAAI,4BAA4BC,IAAI,kBAAkBC,MAAM,QACjHV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,8BACbP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,QAAd,mBACAP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,QAAd,iBACAP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,sBACZP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,oBAAmBP,EAAAC,EAAAC,cAAA,KAAGS,KAAK,+CAA8CX,EAAAC,EAAAC,cAAA,KAAGK,UAAU,yBACpGP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,oBAAmBP,EAAAC,EAAAC,cAAA,KAAGS,KAAK,sCAAqCX,EAAAC,EAAAC,cAAA,KAAGK,UAAU,sBAG/FP,EAAAC,EAAAC,cAAA,KAAGK,UAAU,kCAAkCI,KAAK,gBAAeX,EAAAC,EAAAC,cAAA,KAAGK,UAAU,uBAAhF,sBCbHK,SALS,WACpB,OACJZ,EAAAC,EAAAC,cAAA,8BCSeW,mLAZP,OACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAWV,OAAK,GAClBJ,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,cANUC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c2e48737.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Jumbotron,\r\n    Button\r\n} from 'reactstrap';\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n\r\n\r\n<Jumbotron fluid>\r\n        <Row>\r\n            <Col>\r\n              <header className=\"header\">\r\n                <div className=\"container clearfix\">\r\n                  <img className=\"profile-image img-fluid float-left\"  src=\"assets/images/profile.jpg\" alt=\"Martin Vicknair\" width=\"160\" />\r\n                  <div className=\"profile-content float-left\">\r\n                    <h1 className=\"name\">Martin Vicknair</h1>\r\n                    <h2 className=\"desc\">Web Developer</h2>\r\n                    <ul className=\"social list-inline\">\r\n                      <li className=\"list-inline-item\"><a href=\"https://www.linkedin.com/in/martinvicknair/\"><i className=\"fab fa-linkedin-in\"></i></a></li>\r\n                      <li className=\"list-inline-item\"><a href=\"https://github.com/martinvicknair/\"><i className=\"fab fa-github\"></i></a></li>\r\n                    </ul>\r\n                  </div>\r\n                  <a className=\"btn btn-cta-primary float-right\" href=\"#contactInfo\"><i className=\"fas fa-paper-plane\"></i> Contact Me</a>\r\n                </div>\r\n              </header>\r\n            </Col>\r\n        </Row>\r\n</Jumbotron>\r\n\r\n)};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Jumbotron,\r\n    Button\r\n} from 'reactstrap';\r\nimport \"./SectionsWrapper.css\";\r\n\r\nconst SectionsWrapper = () => {\r\n    return (\r\n<p>SectionsWrapper</p>\r\n)};\r\n\r\nexport default SectionsWrapper;\r\n","import React, { Component } from 'react';\nimport {\n  // Button,\n  Container,\n  // Row,\n  // Col,\n  // Navbar,\n  // NavbarBrand,\n} from 'reactstrap';\nimport Header from './components/Header/Header';\nimport SectionsWrapper from './components/SectionsWrapper/SectionsWrapper';\n\n\nclass App extends Component {\n\n    render() {\n        return (\n          <Container fluid>\n        <Header />\n        <SectionsWrapper>\n\n\n        </SectionsWrapper>\n        </Container>\n      )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}